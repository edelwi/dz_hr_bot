import logging
from typing import Optional

from aiogram import Router, F
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters.callback_data import CallbackData
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from app.bot import bot
from app.kbd.send_cancel import get_send_cancel_kb
from app.middlewares.store import StoreMiddleware

router = Router()
router.message.middleware(StoreMiddleware())

# –í–æ–æ–±—â–µ –≥–æ–≤–æ—Ä—è, –º–æ–∂–Ω–æ –Ω–∞ —Ä–æ—É—Ç–µ—Ä –Ω–∞–≤–µ—Å–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
# —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ª–µ–∂–∏—Ç –ª–∏ –∞–π–¥–∏ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ admins.
# –¢–æ–≥–¥–∞ –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤ —Ä–æ—É—Ç–µ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
# —Ç–æ–ª—å–∫–æ –¥–ª—è –ª—é–¥–µ–π –∏–∑ admins, —ç—Ç–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç –∫–æ–¥ –∏ –∏–∑–±–∞–≤–∏—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ if
# –ù–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ if-else, —á—Ç–æ–±—ã –±—ã–ª–æ –Ω–∞–≥–ª—è–¥–Ω–µ–µ

action_names = ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å", "–í—ã–π—Ç–∏"]
user_data = {}  # TODO: replace on state


class Notification(StatesGroup):
    edit = State()
    send = State()
    cancel = State()
    exit = State()
    # ready = State()


class EditAnswersCallbackFactory(CallbackData, prefix="answer"):
    action: str
    owner: int
    text_msg: Optional[str] = None


@router.message(Command("my_id"))
async def cmd_my_id(message: Message):
    logging.info("my_id")
    await message.answer(f"{message.from_user.id}")
    logging.info("got my_id")


@router.message(Command("chat_id"))
async def cmd_chat_id(message: Message):
    logging.info("chat_id")
    chat_id = message.chat.id if message.chat.id < 0 else "ü§∑"
    await message.answer(f"{chat_id} {message.chat.title}")
    logging.info("got chat_id")


@router.message(Command("help"))
async def cmd_help(message: Message):
    logging.info("help")
    msg = """/<b>my_id</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/<b>chat_id</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
/<b>notify</b> - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Ç—ã (<i>—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>)
/<b>help</b> - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
    """
    await message.answer(msg, parse_mode="HTML")

@router.message(Command("notify"))
async def cmd_notify(message: Message, editors: set[int], state: FSMContext):
    logging.info("notify")
    if message.from_user.id not in editors:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è üßê")
    else:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ...")
        await state.set_state(Notification.edit)
        logging.info("State -> edit")


@router.message(Notification.edit)
async def edit_message(message: Message, state: FSMContext):
    logging.info(f"message: {message.text}")

    user_data[message.from_user.id] = message.md_text
    await message.reply(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_send_cancel_kb(),
        # reply_markup=make_row_keyboard(action_names)
        # reply_markup=get_send_cancel_kb_fab(owner=message.from_user.id, text_msg=message.text)
    )
    await state.set_state(Notification.send)
    logging.info("State -> send")


@router.callback_query(F.data == "send_out")
async def send_confirm(callback: CallbackQuery, state: FSMContext):

    text = user_data.get(callback.from_user.id)
    logging.info(f"send_confirm {text=}")
    if text:
        await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é!", show_alert=True, reply_markup=ReplyKeyboardRemove())
        try:
            await bot.send_message(-4067453977, text, parse_mode="MarkdownV2")
        except TelegramForbiddenError as e:
            logging.error(e.message)
        user_data[callback.from_user.id] = None
    else:
        await callback.answer("Upss! Nothing to send.", show_alert=True, reply_markup=ReplyKeyboardRemove())
    await state.set_state(Notification.edit)


@router.callback_query(F.data == "cancel")
async def send_cancel(callback: CallbackQuery, state: FSMContext):
    user_data.setdefault(callback.from_user.id, None)
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ!", show_alert=True)
    await state.set_state(Notification.edit)


@router.callback_query(F.data == "exit_notify")
async def exit_dialog(callback: CallbackQuery, state: FSMContext):
    user_data.setdefault(callback.from_user.id, None)
    await callback.answer("–í—ã—Ö–æ–¥!", show_alert=True)
    await state.set_state(Notification.exit)
